{"files":[{"path":["/","home","eliminmax","Git","tarpaulin-repro","src","main.rs"],"content":"\n#[inline(never)]\nfn do_something_with<T>(_data: T) {}\n\nfn getopt_like<T: Iterator<Item = String>>(mut args: T) -> Vec<String> {\n    let mut remaining_args: Vec<String> = Vec::new();\n    while let Some(arg) = args.next() {\n        if arg == \"--\" {\n            remaining_args.extend(args);\n            break;\n        }\n        let mut arg_chars = arg.chars();\n        if arg.as_bytes()[0] != b'-' {\n            remaining_args.push(arg_chars.collect());\n            remaining_args.extend(args);\n            break;\n        }\n        let _ = arg_chars.next();\n        while let Some(c) = arg_chars.next() {\n            match c {\n                'a' => do_something_with(\"A\"),\n                'e' => {\n                    let mut remainder: String = arg_chars.collect();\n                    if remainder.is_empty() {\n                        if let Some(next_arg) = args.next() {\n                            remainder.push_str(&next_arg);\n                        }\n                    }\n                    remaining_args.push(remainder);\n                    break;\n                }\n                c => do_something_with(c),\n            }\n        }\n    }\n    remaining_args\n}\n\n#[cfg(not(tarpaulin))]\nfn main() {\n    use std::env::args;\n    do_something_with(getopt_like(args().skip(1)));\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn some_test() {\n        assert_eq!(\n            getopt_like(\n                vec![String::from(\"-a\"), String::from(\"foo\"), String::from(\"bar\"),].into_iter()\n            ),\n            vec![String::from(\"foo\"), String::from(\"bar\")]\n        );\n        assert_eq!(\n            getopt_like(\n                vec![\n                    String::from(\"-eo\"),\n                    String::from(\"-q\"),\n                    String::from(\"-e\"),\n                    String::from(\"foo\"),\n                    String::from(\"-a\"),\n                    String::from(\"--\"),\n                    String::from(\"-e\"),\n                    String::from(\"-a\"),\n                    String::from(\"-e\"),\n                ]\n                .into_iter()\n            ),\n            vec![\n                String::from(\"o\"),\n                String::from(\"foo\"),\n                String::from(\"-e\"),\n                String::from(\"-a\"),\n                String::from(\"-e\")\n            ]\n        );\n    }\n}\n","traces":[{"line":3,"address":[138096,138116,138112,138106],"length":1,"stats":{"Line":4}},{"line":5,"address":[139347,139659,138128],"length":1,"stats":{"Line":1}},{"line":6,"address":[138243,138150],"length":1,"stats":{"Line":2}},{"line":7,"address":[138258,138299,139438],"length":1,"stats":{"Line":3}},{"line":8,"address":[138382,138496],"length":1,"stats":{"Line":2}},{"line":9,"address":[138532,139553],"length":1,"stats":{"Line":2}},{"line":10,"address":[],"length":0,"stats":{"Line":0}},{"line":12,"address":[138603,138510],"length":1,"stats":{"Line":2}},{"line":13,"address":[138654],"length":1,"stats":{"Line":1}},{"line":14,"address":[139443,138739],"length":1,"stats":{"Line":2}},{"line":15,"address":[139475],"length":1,"stats":{"Line":1}},{"line":16,"address":[],"length":0,"stats":{"Line":0}},{"line":18,"address":[138773,138732],"length":1,"stats":{"Line":2}},{"line":19,"address":[138783],"length":1,"stats":{"Line":1}},{"line":20,"address":[138851],"length":1,"stats":{"Line":1}},{"line":21,"address":[138901,138951],"length":1,"stats":{"Line":2}},{"line":22,"address":[],"length":0,"stats":{"Line":0}},{"line":23,"address":[138956,138920],"length":1,"stats":{"Line":2}},{"line":24,"address":[138972,139028,139374],"length":1,"stats":{"Line":3}},{"line":25,"address":[139117],"length":1,"stats":{"Line":1}},{"line":26,"address":[139215,139325],"length":1,"stats":{"Line":2}},{"line":29,"address":[139034],"length":1,"stats":{"Line":1}},{"line":30,"address":[],"length":0,"stats":{"Line":0}},{"line":32,"address":[139425,138891],"length":1,"stats":{"Line":2}},{"line":36,"address":[139578],"length":1,"stats":{"Line":1}}],"covered":21,"coverable":25}],"coverage":84.0,"covered":21,"coverable":25}